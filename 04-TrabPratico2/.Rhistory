plot(1:8, las = 2, xlab = "xlab", ylab = "ylab", main = "LAS = 2")
plot(1:8, las = 3, xlab = "xlab", ylab = "ylab", main = "LAS = 3")
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Var1", "Var2"))
colors()
png("Grafico.png", width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = "Gráfico gerado a partir do Iris")
dev.off()
pdf("Grafico.pfd")
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = "Gráfico gerado a partir do Iris")
dev.off()
pdf("Grafico.pdf")
plot(iris$Sepal.Length, iris$Petal.Length,
col = iris$Species,
main = "Gráfico gerado a partir do Iris")
dev.off()
install.packages('plotrix')
library(plotrix)
library(plotrix)
par(mfrow = c(1,1), col.axis = "red")
plot(1:6, las = 3, xlab = "lty 1:6", ylab = "", main = "Mais opções ao plot")
plot(1:6, las = 3, xlab = "lty 1:6", ylab = "", main = "Mais opções ao plot")
ablineclip(v=1, lty=1, col="sienna2", lwd=2)
ablineclip(v=2, lty=1, col="sienna2", lwd=2)
ablineclip(v=3, lty=1, col="sienna2", lwd=2)
ablineclip(v=4, lty=1, col="sienna2", lwd=2)
ablineclip(v=5, lty=1, col="sienna2", lwd=2)
ablineclip(v=6, lty=1, col="sienna2", lwd=2)
ablineclip(v=7, lty=1, col="sienna2", lwd=2)
plot(lynx)
plot(lynx, type="p", main="Type p")
plot(lynx, type="l", main="Type l")
plot(lynx, type="b", main="Type b")
plot(lynx, type="o", main="Type o")
plot(lynx, type="h", main="Type h")
plot(lynx, type="s", main="Type s")
plot(lynx, type="n", main="Type n")
plot(lynx, type="p", main="Type p")
plot(lynx, type="l", main="Type l")
plot(lynx, type="b", main="Type b")
plot(lynx, type="o", main="Type o")
plot(lynx, type="h", main="Type h")
plot(lynx, type="s", main="Type s")
par(mar=c(4,3,3,3), col.axis="black")
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="")
text(8, 14, "Velocidade", cex=0.85, col="red")
par(new=T)
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4)
text(37, 18, "Distância", cex=0.85, col="darkblue")
title(main="Velocidade x Distância")
df <- read.csv('pibpercap.csv', stringsAsFactors = F)
df <- read.csv('pibpercap.csv', stringsAsFactors = F)
df_1982 <- subset(df, ano == 1982)
plot(expectativa ~ pibpercap, data = df_1982, log = "x")
View(df)
mycol <- c(Asia = "tomato", Europe = "chocolate4", Africa = "dodgerblue2",
Americas = "darkgoldenrod1", Oceania = "green4")
plot(expectativa ~ pibpercap, data = df_1982, log = "x", col = mycol[continente])
mycex <- function(var, r, f = sqrt){
x = f(var)
x_scaled = (x - min(x))/(max(x) - min(x))
r[1] + x_scaled * (r[2] - r[1])
}
plot(expectativa ~ pibpercap, data = df_1982, log = "x",
col = mycol[continente],
cex = mycex(pop, r = c(0.2, 10))
)
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
set.seed(67)
x = rnorm(10,5,7)
y = rpois(10,7)
z = rnorm(10,6,7)
t = rpois(10,9)
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "Variável Independente",
ylab = "Variável Dependente")
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "Variável Independente",
ylab = "Variável Dependente")
points(z, t, col = "blue", pch = 4)
points(y, t, col = 777, pch = 9)
legend(-6,5.9, legend = c("Nível 1", "Nível 2", "Nível 3"),
col = c(123, "blue", 777), pch = c(10,4,9),
cex = 0.65, bty = "n")
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "Variável Independente",
ylab = "Variável Dependente")
points(z, t, col = "blue", pch = 4)
points(y, t, col = 777, pch = 9)
legend(-6,5.9, legend = c("Nível 1", "Nível 2", "Nível 3"),
col = c(123, "blue", 777), pch = c(10,4,9),
cex = 0.65, bty = "n")
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
attach(sleep)
View(sleep)
sleepboxplot = boxplot(data = sleep, extra ~ group,
main = "Duração do Sono",
col.main = "red", ylab = "Horas", xlab = "Droga")
medias = by(extra, group, mean)
points(medias, col = "red")
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab = "", xlab = "", horizontal = T)
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab = "", xlab = "", horizontal = T,
col = c("blue", "red") )
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
View(cars)
dados = cars$speed
hist(dados)
hist(dados, breaks = 10, main = "Histograma das Velocidades") # breaks: caixinhas
hist(dados, labels = T, breaks = c(0,5,10,20,30), main = "Histograma das Velocidades")
hist(dados, labels = T, breaks = c(0,5,10,20,30), main = "Histograma das Velocidades")
hist(dados, labels = T, breaks = 10, main = "Histograma das Velocidades")
hist(dados, labels = T, breaks = 10, main = "Histograma das Velocidades")
hist(dados, labels = T, ylim = c(0,10), breaks = 10, main = "Histograma das Velocidades")
grafico <- hist(dados, breaks = 10, main = "Histograma das Velocidades")
xaxis = seq(min(dados), max(dados), length = 10)
xaxis = seq(min(dados), max(dados), length = 10)
yaxis = dnorm(xaxis, mean = mean(dados), sd = sd(dados))
yaxis = yaxis*diff(grafico$mids)*length(dados)
lines(xaxis, yaxis, col = "red")
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
dados <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
dados
colnames(dados) <- c("0","1-150","151-300",">300")
rownames(dados) <- c("Jovem","Adulto","Idoso")
dados
barplot(dados, beside = T)
barplot(dados)
barplot(dados, beside = T) #
barplot(dados)
colnames(dados) <- c("0","1-150","151-300",">300") # cada coluna representa uma faixa de número de casamento
rownames(dados) <- c("Jovem","Adulto","Idoso") # cada linha representa uma faixa etária
dados
barplot(dados, beside = T)
barplot(dados, beside = T)
barplot(dados)
barplot(dados, beside = T)
barplot(dados)
barplot(dados, col = c("steelblue1", "tan3", "seagreen3"))
barplot(dados, col = c("steelblue1", "tan3", "seagreen3"))
colors()
legend("topright", pch = 1, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
barplot(dados, beside = T, col = c("steelblue1", "tan3", "seagreen3"))
legend("topright", pch = 1, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
t(dados)
t(dados)
barplot(t(dados), beside = T, col = c("steelblue1", "tan3", "seagreen3", "peachpuff1"))
legend("topright", pch = 1, col = c("steelblue1", "tan3", "seagreen3", "peachpuff1"), legend = c("0","1-150","151-300",">300"))
legend("topright", pch = 2, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
legend("topright", pch = 3, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
barplot(dados)
barplot(dados, col = c("steelblue1", "tan3", "seagreen3")) # cores
legend("topright", pch = 3, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
legend("topright", pch = 16, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
t(dados)
barplot(dados, beside = T, col = c("steelblue1", "tan3", "seagreen3"))
legend("topright", pch = 16, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
legend("topright", pch = 17, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
legend("topright", pch = 18, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3", "peachpuff1"), legend = c("0","1-150","151-300",">300"))
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
fatias = c(40, 20, 40)
paises = c("Brasil", "Argentina", "Chile")
paises = paste(paises, fatias)
paises = paste(paises, fatias)
paises = paste(paises, "%", sep = "")
pie(fatias, labels = paises,
col = c("darksalmon", "gainsboro", "lemonchiffon4"),
main ="Dsitribuição de Vendas")
attach(iris)
Values = table(Species)
labels = paste(names(Values))
pie(Values, labels = labels, main = "Distribuição de Espécies")
install.packages("plotrix")
install.packages("plotrix")
library(plotrix)
pie3D(fatias, labels = paises, explode = 0.05,
col = c("steelblue1", "tomato2", "tan3"),
main = "Dsitribuição de Vendas")
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
install.packages("ggplot2")
library(ggplot2)
data(tips, package = 'reshape2')
View(tips)
qplot(total_bill, tip, data = tips, geom = "point")
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
head(modelo_fit)
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
)
head(modelo_fit)
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
ggplot() + camada1 + camada2
# Camada 3
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
ggplot() + camada1 + camada2 + camada3
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
myplot <- ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
class(myplot)
print(myplot)
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var1 = 1:100 +
rnorm(100,sd = 9), var2 = 1:100 +
rnorm(100,sd = 16))
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)
# Dados
data = data.frame(grupo = c("A ","B ","C ","D ") ,
valor = c(33,62,56,67) ,
num_obs = c(100,500,459,342))
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right,
ymax = valor, colour = grupo, fill = grupo)) +
xlab("Número de Observações") + ylab("Valor")
head(mtcars)
ggplot(data = mtcars, aes(x = disp, y = mpg)) + geom_point()
ggplot(data = mtcars, aes(x = disp, y = mpg)) + geom_point()
ggplot(data = mtcars,
aes(x = disp, y = mpg,
colour = as.factor(am))) + geom_point()
View(mtcars)
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl)) + geom_point()
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) + geom_boxplot()
ggplot(mtcars, aes(x = mpg), binwidth = 30) + geom_histogram()
ggplot(mtcars, aes(x = as.factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
colour = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
fill = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars,
aes(x = as.factor(cyl), y = mpg)) +
geom_boxplot(color = "blue", fill = "seagreen4")
ggplot(mtcars, aes(x = mpg)) +
geom_histogram() +
xlab("Milhas por galão") + ylab("Frequência")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl") +
theme(legend.position = "top")
# Sem legenda
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
guides(fill = FALSE)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(am~.)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(.~am)
install.packages("gridExtra")
library(gridExtra)
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(am~.)
data(diamonds)
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
grid.arrange(plot1, plot2, ncol = 1)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5 , alpha = 0.2)
ggplot(data = diamonds,aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5, position = "fill")
install.packages("reshape2")
install.packages("plotly")
library(reshape2)
library(plotly)
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
install.packages('lattice')
install.packages("lattice")
library(lattice)
View(iris)
xyplot(data = iris, groups = Species, Sepal.Length ~ Petal.Length)
?Titanic
?Titanic
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2),
scales = list(x = "free"))
PetalLength <- equal.count(iris$Petal.Length, 4)
PetalLength
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris)
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris)
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(...) {
panel.grid(h = -1, v = -1, col.line = "skyblue")
panel.xyplot(...)})
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(x,y,...) {
panel.xyplot(x,y,...)
mylm <- lm(y~x)
panel.abline(mylm)})
histogram(~Sepal.Length | Species, xlab = "",
data = iris, layout=c(3,1), type = "density",
main = "Histograma Lattice", sub = "Iris Dataset, Sepal Length")
qqmath(~ Sepal.Length | Species, data = iris, distribution = qunif)
bwplot(Species~Sepal.Length, data = iris)
bwplot(Species~Sepal.Length, data = iris,
panel = panel.violin)
getwd()
setwd("C:/Users/paloma/Desktop/DSA/BigDataRAzure/04-LingRGraficos")
getwd()
install.packages(c("ggplot2", "maps", "mapdata"))
install.packages(c("ggplot2", "maps", "mapdata"))
library(ggplot2)
library(maps)
library(mapdata)
mapa <- map_data("world")
dim(mapa)
View(mapa)
ggplot() + geom_polygon(data = mapa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = NA, color = "blue") +
coord_fixed(1.3)
gg1 <- ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = "seagreen1", color = "blue") +
coord_fixed(1.3)
gg1
labs <- data.frame(
long = c(69.24140, -2.8456051),
lat = c(-78.38995, 22.44512),
names = c("Ponto1", "Ponto2"),
stringsAsFactors = FALSE
)
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "yellow", size = 2)
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "yellow", size = 2)
# Divisão por países
ggplot(data = mapa) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
setwd("C:\Users\paloma\Desktop\GitHub\R\04-TrabPratico2")
getwd()
setwd("C:/Users/paloma/Desktop/GitHub/R/04-TrabPratico2")
getwd()
setwd("C:/Users/paloma/Desktop/GitHub/R/04-TrabPratico2")
install.packages("googleVis")
library(googleVis)
df = data.frame(País = c("BR", "CH", "AR"),
Exportações = c(10,13,14),
Importações = c(23,12,32))
Line <- gvisLineChart(df)
plot(Line)
Column <- gvisColumnChart(df)
plot(Column)
Bar <- gvisBarChart(df)
plot(Bar)
Pie <- gvisPieChart(CityPopularity)
plot(Pie)
Combo <- gvisComboChart(df, xvar = "País",
yvar = c("Exportações", "Importações"),
options = list(seriesType = "bars",
series='{1: {type:"line"}}'))
plot(Combo)
plot(Combo)
plot(Line)
library(googleVis)
Line <- gvisLineChart(df)
plot(Line)
plot(Combo)
# Scatter Chart
Scatter <- gvisScatterChart(women,
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="Women", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
plot(Scatter)
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
# Bubble
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
# Customizando
M <- matrix(nrow=6,ncol=6)
M[col(M)==row(M)] <- 1:6
dat <- data.frame(X=1:6, M)
SC <- gvisScatterChart(dat,
options=list(
title="Customizing points",
legend="right",
pointSize=30,
series="{
0: { pointShape: 'circle' },
1: { pointShape: 'triangle' },
2: { pointShape: 'square' },
3: { pointShape: 'diamond' },
4: { pointShape: 'star' },
5: { pointShape: 'polygon' }
}"))
plot(SC)
# Gauge
Gauge <- gvisGauge(CityPopularity,
options=list(min=0, max=800, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
Intensity <- gvisIntensityMap(df)
plot(Intensity)
Gauge <- gvisGauge(CityPopularity,
options=list(min=0, max=800, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
# Mapas
Intensity <- gvisIntensityMap(df)
plot(Intensity)
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
plot(AndrewMap)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
